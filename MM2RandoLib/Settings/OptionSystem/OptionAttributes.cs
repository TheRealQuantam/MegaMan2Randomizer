using System;
using System.Collections.Generic;
using System.Linq;

namespace MM2RandoLib.Settings.Options;

/// <summary>
/// When applied to an option, specifies that it should be saved and loaded automatically.
/// </summary>
[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
public sealed class SaveOptionAttribute : Attribute
{
    public const bool SaveDefault = true;

    public readonly bool Save;

    public SaveOptionAttribute(bool save = true) => Save = save;
}

/// <summary>
/// Specifies the tooltip for an option's control.
/// </summary>
[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
public sealed class TooltipAttribute : Attribute
{
    public readonly string Tooltip;

    public TooltipAttribute(string tooltip) => Tooltip = tooltip;
}

/// <summary>
/// When applied to an option, specifies whether the control for the option should be autogenerated.
/// </summary>
[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
public class CreateControlAttribute : Attribute
{
    public const bool CreateControlDefault = true;

    public readonly bool CreateControl;

    public CreateControlAttribute(bool createControl = true) => CreateControl = createControl;
}

/// <summary>
/// When applied to an option, specifies that no control for the option should be autogenerated.
/// </summary>
public class NoCreateControlAttribute : CreateControlAttribute
{
    public NoCreateControlAttribute() : base(false)
    {
    }
}

/// <summary>
/// Allows custom properties to be specified for autogenerated controls.
/// </summary>
[AttributeUsage(AttributeTargets.Field, AllowMultiple = true)]
public sealed class ControlPropertyAttribute<T> : Attribute
{
    public readonly string Name;
    public readonly T Value;

    public ControlPropertyAttribute(string name, T value)
    {
        Name = name;
        Value = value;
    }
}

/// <summary>
/// Allows custom properties to be specified for autogenerated controls.
/// </summary>
[AttributeUsage(AttributeTargets.Field)]
public sealed class ControlPropertiesAttribute : Attribute
{
    public readonly IReadOnlyDictionary<string, object> Properties;

    public ControlPropertiesAttribute(
        IEnumerable<KeyValuePair<string, object>> properties)
        => Properties = new Dictionary<string, object>(properties);
}

